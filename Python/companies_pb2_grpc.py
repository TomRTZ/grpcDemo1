# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import companies_pb2 as companies__pb2


class CompaniesStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetFoundingYear = channel.unary_unary(
        '/companies.Companies/GetFoundingYear',
        request_serializer=companies__pb2.Name.SerializeToString,
        response_deserializer=companies__pb2.FoundingYear.FromString,
        )
    self.ListCompanies = channel.unary_stream(
        '/companies.Companies/ListCompanies',
        request_serializer=companies__pb2.FoundingYear.SerializeToString,
        response_deserializer=companies__pb2.Name.FromString,
        )
    self.CalcAverageAge = channel.stream_unary(
        '/companies.Companies/CalcAverageAge',
        request_serializer=companies__pb2.Name.SerializeToString,
        response_deserializer=companies__pb2.AverageAge.FromString,
        )
    self.GetCompanyInformation = channel.stream_stream(
        '/companies.Companies/GetCompanyInformation',
        request_serializer=companies__pb2.Name.SerializeToString,
        response_deserializer=companies__pb2.Company.FromString,
        )


class CompaniesServicer(object):
  """Interface exported by the server.
  """

  def GetFoundingYear(self, request, context):
    """A simple RPC.

    Obtains the year in which the given company was founded.

    A default year 2900 will be returned if the company name is not in the database.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListCompanies(self, request, context):
    """A server-to-client streaming RPC.

    Obtains all the companies' name which was founded in the given year
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CalcAverageAge(self, request_iterator, context):
    """A client-to-server streaming RPC.

    Accepts a stream of company names, returning the average age of these companies
    Average age here means the average exixting years of the given companies in year 2017
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCompanyInformation(self, request_iterator, context):
    """A Bidirectional streaming RPC.

    Accepts a stream of company names sent by the client,
    Returns a stream of those companies information.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CompaniesServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetFoundingYear': grpc.unary_unary_rpc_method_handler(
          servicer.GetFoundingYear,
          request_deserializer=companies__pb2.Name.FromString,
          response_serializer=companies__pb2.FoundingYear.SerializeToString,
      ),
      'ListCompanies': grpc.unary_stream_rpc_method_handler(
          servicer.ListCompanies,
          request_deserializer=companies__pb2.FoundingYear.FromString,
          response_serializer=companies__pb2.Name.SerializeToString,
      ),
      'CalcAverageAge': grpc.stream_unary_rpc_method_handler(
          servicer.CalcAverageAge,
          request_deserializer=companies__pb2.Name.FromString,
          response_serializer=companies__pb2.AverageAge.SerializeToString,
      ),
      'GetCompanyInformation': grpc.stream_stream_rpc_method_handler(
          servicer.GetCompanyInformation,
          request_deserializer=companies__pb2.Name.FromString,
          response_serializer=companies__pb2.Company.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'companies.Companies', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
