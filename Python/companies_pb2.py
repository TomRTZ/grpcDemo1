# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: companies.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='companies.proto',
  package='companies',
  syntax='proto3',
  serialized_pb=_b('\n\x0f\x63ompanies.proto\x12\tcompanies\"\x14\n\x04Name\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x1c\n\x0c\x46oundingYear\x12\x0c\n\x04year\x18\x01 \x01(\x05\"\x19\n\nAverageAge\x12\x0b\n\x03\x61ge\x18\x01 \x01(\x05\"l\n\x07\x43ompany\x12\x1d\n\x04name\x18\x01 \x01(\x0b\x32\x0f.companies.Name\x12-\n\x0c\x66oundingYear\x18\x02 \x01(\x0b\x32\x17.companies.FoundingYear\x12\x13\n\x0bmarketValue\x18\x03 \x01(\x05\x32\x8b\x02\n\tCompanies\x12=\n\x0fGetFoundingYear\x12\x0f.companies.Name\x1a\x17.companies.FoundingYear\"\x00\x12=\n\rListCompanies\x12\x17.companies.FoundingYear\x1a\x0f.companies.Name\"\x00\x30\x01\x12<\n\x0e\x43\x61lcAverageAge\x12\x0f.companies.Name\x1a\x15.companies.AverageAge\"\x00(\x01\x12\x42\n\x15GetCompanyInformation\x12\x0f.companies.Name\x1a\x12.companies.Company\"\x00(\x01\x30\x01\x42 \n\x0cio.grpc.demoB\x0e\x43ompaniesProtoP\x01\x62\x06proto3')
)




_NAME = _descriptor.Descriptor(
  name='Name',
  full_name='companies.Name',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='companies.Name.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=30,
  serialized_end=50,
)


_FOUNDINGYEAR = _descriptor.Descriptor(
  name='FoundingYear',
  full_name='companies.FoundingYear',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='year', full_name='companies.FoundingYear.year', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=80,
)


_AVERAGEAGE = _descriptor.Descriptor(
  name='AverageAge',
  full_name='companies.AverageAge',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='age', full_name='companies.AverageAge.age', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=82,
  serialized_end=107,
)


_COMPANY = _descriptor.Descriptor(
  name='Company',
  full_name='companies.Company',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='companies.Company.name', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='foundingYear', full_name='companies.Company.foundingYear', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='marketValue', full_name='companies.Company.marketValue', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=109,
  serialized_end=217,
)

_COMPANY.fields_by_name['name'].message_type = _NAME
_COMPANY.fields_by_name['foundingYear'].message_type = _FOUNDINGYEAR
DESCRIPTOR.message_types_by_name['Name'] = _NAME
DESCRIPTOR.message_types_by_name['FoundingYear'] = _FOUNDINGYEAR
DESCRIPTOR.message_types_by_name['AverageAge'] = _AVERAGEAGE
DESCRIPTOR.message_types_by_name['Company'] = _COMPANY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Name = _reflection.GeneratedProtocolMessageType('Name', (_message.Message,), dict(
  DESCRIPTOR = _NAME,
  __module__ = 'companies_pb2'
  # @@protoc_insertion_point(class_scope:companies.Name)
  ))
_sym_db.RegisterMessage(Name)

FoundingYear = _reflection.GeneratedProtocolMessageType('FoundingYear', (_message.Message,), dict(
  DESCRIPTOR = _FOUNDINGYEAR,
  __module__ = 'companies_pb2'
  # @@protoc_insertion_point(class_scope:companies.FoundingYear)
  ))
_sym_db.RegisterMessage(FoundingYear)

AverageAge = _reflection.GeneratedProtocolMessageType('AverageAge', (_message.Message,), dict(
  DESCRIPTOR = _AVERAGEAGE,
  __module__ = 'companies_pb2'
  # @@protoc_insertion_point(class_scope:companies.AverageAge)
  ))
_sym_db.RegisterMessage(AverageAge)

Company = _reflection.GeneratedProtocolMessageType('Company', (_message.Message,), dict(
  DESCRIPTOR = _COMPANY,
  __module__ = 'companies_pb2'
  # @@protoc_insertion_point(class_scope:companies.Company)
  ))
_sym_db.RegisterMessage(Company)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\014io.grpc.demoB\016CompaniesProtoP\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class CompaniesStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetFoundingYear = channel.unary_unary(
          '/companies.Companies/GetFoundingYear',
          request_serializer=Name.SerializeToString,
          response_deserializer=FoundingYear.FromString,
          )
      self.ListCompanies = channel.unary_stream(
          '/companies.Companies/ListCompanies',
          request_serializer=FoundingYear.SerializeToString,
          response_deserializer=Name.FromString,
          )
      self.CalcAverageAge = channel.stream_unary(
          '/companies.Companies/CalcAverageAge',
          request_serializer=Name.SerializeToString,
          response_deserializer=AverageAge.FromString,
          )
      self.GetCompanyInformation = channel.stream_stream(
          '/companies.Companies/GetCompanyInformation',
          request_serializer=Name.SerializeToString,
          response_deserializer=Company.FromString,
          )


  class CompaniesServicer(object):
    """Interface exported by the server.
    """

    def GetFoundingYear(self, request, context):
      """A simple RPC.

      Obtains the year in which the given company was founded.

      A default year 2900 will be returned if the company name is not in the database.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListCompanies(self, request, context):
      """A server-to-client streaming RPC.

      Obtains all the companies' name which was founded in the given year
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CalcAverageAge(self, request_iterator, context):
      """A client-to-server streaming RPC.

      Accepts a stream of company names, returning the average age of these companies
      Average age here means the average exixting years of the given companies in year 2017
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCompanyInformation(self, request_iterator, context):
      """A Bidirectional streaming RPC.

      Accepts a stream of company names sent by the client,
      Returns a stream of those companies information.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_CompaniesServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetFoundingYear': grpc.unary_unary_rpc_method_handler(
            servicer.GetFoundingYear,
            request_deserializer=Name.FromString,
            response_serializer=FoundingYear.SerializeToString,
        ),
        'ListCompanies': grpc.unary_stream_rpc_method_handler(
            servicer.ListCompanies,
            request_deserializer=FoundingYear.FromString,
            response_serializer=Name.SerializeToString,
        ),
        'CalcAverageAge': grpc.stream_unary_rpc_method_handler(
            servicer.CalcAverageAge,
            request_deserializer=Name.FromString,
            response_serializer=AverageAge.SerializeToString,
        ),
        'GetCompanyInformation': grpc.stream_stream_rpc_method_handler(
            servicer.GetCompanyInformation,
            request_deserializer=Name.FromString,
            response_serializer=Company.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'companies.Companies', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaCompaniesServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by the server.
    """
    def GetFoundingYear(self, request, context):
      """A simple RPC.

      Obtains the year in which the given company was founded.

      A default year 2900 will be returned if the company name is not in the database.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListCompanies(self, request, context):
      """A server-to-client streaming RPC.

      Obtains all the companies' name which was founded in the given year
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CalcAverageAge(self, request_iterator, context):
      """A client-to-server streaming RPC.

      Accepts a stream of company names, returning the average age of these companies
      Average age here means the average exixting years of the given companies in year 2017
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCompanyInformation(self, request_iterator, context):
      """A Bidirectional streaming RPC.

      Accepts a stream of company names sent by the client,
      Returns a stream of those companies information.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaCompaniesStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Interface exported by the server.
    """
    def GetFoundingYear(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """A simple RPC.

      Obtains the year in which the given company was founded.

      A default year 2900 will be returned if the company name is not in the database.
      """
      raise NotImplementedError()
    GetFoundingYear.future = None
    def ListCompanies(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """A server-to-client streaming RPC.

      Obtains all the companies' name which was founded in the given year
      """
      raise NotImplementedError()
    def CalcAverageAge(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """A client-to-server streaming RPC.

      Accepts a stream of company names, returning the average age of these companies
      Average age here means the average exixting years of the given companies in year 2017
      """
      raise NotImplementedError()
    CalcAverageAge.future = None
    def GetCompanyInformation(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """A Bidirectional streaming RPC.

      Accepts a stream of company names sent by the client,
      Returns a stream of those companies information.
      """
      raise NotImplementedError()


  def beta_create_Companies_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('companies.Companies', 'CalcAverageAge'): Name.FromString,
      ('companies.Companies', 'GetCompanyInformation'): Name.FromString,
      ('companies.Companies', 'GetFoundingYear'): Name.FromString,
      ('companies.Companies', 'ListCompanies'): FoundingYear.FromString,
    }
    response_serializers = {
      ('companies.Companies', 'CalcAverageAge'): AverageAge.SerializeToString,
      ('companies.Companies', 'GetCompanyInformation'): Company.SerializeToString,
      ('companies.Companies', 'GetFoundingYear'): FoundingYear.SerializeToString,
      ('companies.Companies', 'ListCompanies'): Name.SerializeToString,
    }
    method_implementations = {
      ('companies.Companies', 'CalcAverageAge'): face_utilities.stream_unary_inline(servicer.CalcAverageAge),
      ('companies.Companies', 'GetCompanyInformation'): face_utilities.stream_stream_inline(servicer.GetCompanyInformation),
      ('companies.Companies', 'GetFoundingYear'): face_utilities.unary_unary_inline(servicer.GetFoundingYear),
      ('companies.Companies', 'ListCompanies'): face_utilities.unary_stream_inline(servicer.ListCompanies),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Companies_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('companies.Companies', 'CalcAverageAge'): Name.SerializeToString,
      ('companies.Companies', 'GetCompanyInformation'): Name.SerializeToString,
      ('companies.Companies', 'GetFoundingYear'): Name.SerializeToString,
      ('companies.Companies', 'ListCompanies'): FoundingYear.SerializeToString,
    }
    response_deserializers = {
      ('companies.Companies', 'CalcAverageAge'): AverageAge.FromString,
      ('companies.Companies', 'GetCompanyInformation'): Company.FromString,
      ('companies.Companies', 'GetFoundingYear'): FoundingYear.FromString,
      ('companies.Companies', 'ListCompanies'): Name.FromString,
    }
    cardinalities = {
      'CalcAverageAge': cardinality.Cardinality.STREAM_UNARY,
      'GetCompanyInformation': cardinality.Cardinality.STREAM_STREAM,
      'GetFoundingYear': cardinality.Cardinality.UNARY_UNARY,
      'ListCompanies': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'companies.Companies', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
